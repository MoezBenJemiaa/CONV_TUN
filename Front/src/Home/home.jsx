import React, { useState } from "react";
import "./home.css";
import Footer from "../Footer/footer";
import bg1 from "../pictures/bg1.jpg";
import bg2 from "../pictures/bg2.jpg";
import LocationSelectorMap from "../trajet/PublishTrip/LocationSelectorMap";
import { CiMap } from "react-icons/ci";
import { FaRegUser, FaRegAddressCard } from "react-icons/fa";
import { LiaCoinsSolid } from "react-icons/lia";
import { LuUserRoundCheck, LuZap } from "react-icons/lu";
import { MapIcon } from "lucide-react";
import axios from "axios";

const HomePage = () => {
  const [departure, setDeparture] = useState({ name: "", coordinates: null });
  const [arrival, setArrival] = useState({ name: "", coordinates: null });
  const [showMap, setShowMap] = useState(false);
  const [selecting, setSelecting] = useState("");

  const handleLocationSelect = (location) => {
    if (selecting === "departure") {
      setDeparture(location); // Updates both name and coordinates
    } else if (selecting === "arrival") {
      setArrival(location);
    }
    /*setShowMap(false);*/
  };
  const handleSearch = async (event) => {
    event.preventDefault(); // Prevent page reload

    if (!departure.coordinates || !arrival.coordinates) {
      alert("Veuillez s√©lectionner un point de d√©part et d'arriv√©e.");
      return;
    }

    const selectedDate = document.querySelector(".dateInput").value;
    const seatsRequired = parseInt(
      document.querySelector("#seatsInput").value,
      10
    );

    if (!selectedDate) {
      alert("Veuillez s√©lectionner une date.");
      return;
    }

    try {
      const response = await axios.post("http://localhost:5000/trip/search", {
        departure: departure.coordinates,
        arrival: arrival.coordinates,
        date: selectedDate,
        seatsRequired: seatsRequired || 1, // Default to 1 if empty
      });

      const matchingTrips = response.data;

      if (matchingTrips.length === 0) {
        alert("Aucun trajet trouv√© correspondant √† vos crit√®res.");
        return;
      }

      // Extract trip IDs and redirect
      const tripIds = matchingTrips.map((trip) => trip._id).join(",");
      window.location.href = `/Trajets/${tripIds}`;
    } catch (error) {
      console.error("Erreur lors de la recherche :", error);
      alert("Erreur lors de la recherche des trajets.");
    }
  };

  return (
    <div className="homeContainer">
      <div className="carimg">
        <img src={bg1} alt="Car ride" />
      </div>

      <form className="form" onSubmit={handleSearch}>
        <div className="inputRow">
          <div className="inputGroup">
            <MapIcon
              className="icon"
              onClick={() => {
                setSelecting("departure");
                setShowMap(true);
              }}
            />
            <input
              type="text"
              placeholder="D√©part"
              value={departure.name}
              onClick={() => {
                setSelecting("departure");
                setShowMap(true);
              }}
            />
          </div>

          <div className="inputGroup">
            <MapIcon
              className="icon"
              onClick={() => {
                setSelecting("arrival");
                setShowMap(true);
              }}
            />
            <input
              type="text"
              placeholder="Arriv√©e"
              value={arrival.name}
              onClick={() => {
                setSelecting("arrival");
                setShowMap(true);
              }}
            />
          </div>

          <div className="inputGroup">
            <input
              type="date"
              className="dateInput"
              placeholder="S√©lectionnez une date"
            />
          </div>

          <div className="inputGroup">
            <FaRegUser className="userIcon" />
            <input
              type="number"
              id="seatsInput"
              placeholder="1 passager"
              min="1"
            />
          </div>
          <button type="submit">Rechercher</button>
        </div>
      </form>

      <div className="features">
        <div className="features_container">
          <div className="feat">
            <LiaCoinsSolid className="icon" />
            <h3>Vos trajets pr√©f√©r√©s √† petits prix</h3>
            <p>
              O√π que vous alliez, trouvez le trajet id√©al parmi notre large
              choix de destinations √† petits prix.
            </p>
          </div>

          <div className="feat">
            <FaRegAddressCard className="icon" />
            <h3>Voyagez en toute confiance</h3>
            <p>
              Nous prenons le temps qu'il faut pour conna√Ætre nos membres et nos
              compagnies de bus partenaires. Nous v√©rifions les avis, les
              profils et les pi√®ces d'identit√©. Vous savez donc avec qui vous
              allez voyager pour r√©server en toute confiance sur notre
              plateforme s√©curis√©e.
            </p>
          </div>

          <div className="feat">
            <LuZap className="icon" />
            <h3>Recherchez, cliquez et r√©servez</h3>
            <p>
              R√©server un trajet devient encore plus simple ! Facile
              d'utilisation et dot√©e de technologies avanc√©es, notre appli vous
              permet de r√©server un trajet √† proximit√© en un rien de temps.
            </p>
          </div>
        </div>
      </div>

      <div className="about">
        <div className="description">
          <h2>Votre s√©curit√© est notre priorit√©</h2>
          <p>
            Chez Covoitun, nous nous sommes fix√© comme objectif de construire
            une communaut√© de covoiturage fiable et digne de confiance √† travers
            le monde. Rendez-vous sur notre page Confiance et s√©curit√© pour
            explorer les diff√©rentes fonctionnalit√©s disponibles pour covoiturer
            sereinement.
          </p>
        </div>
        <img src={bg2} alt="Happy people" />
      </div>
      <Footer></Footer>
      {showMap && (
        <div className="mapOverlay">
          <div className="mapContainer">
            <button
              onClick={() => setShowMap(false)}
              style={{
                position: "absolute",
                top: "10px",
                right: "10px",
                background: "red",
                color: "white",
                border: "none",
                padding: "5px 10px",
                cursor: "pointer",
              }}
            >
              X
            </button>

            {/* Map Component */}
            <LocationSelectorMap
              key={showMap}
              onLocationSelect={handleLocationSelect}
            />

            {/* Show Selected Location Name Below the Map */}
            {selecting === "departure" && departure.name && (
              <p
                style={{
                  textAlign: "center",
                  marginTop: "10px",
                  fontWeight: "bold",
                }}
              >
                üìç D√©part s√©lectionn√©: {departure.name}
              </p>
            )}
            {selecting === "arrival" && arrival.name && (
              <p
                style={{
                  textAlign: "center",
                  marginTop: "10px",
                  fontWeight: "bold",
                }}
              >
                üìç Arriv√©e s√©lectionn√©e: {arrival.name}
              </p>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default HomePage;
